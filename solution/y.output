Grammar

    0 $accept: Start $end

    1 Start: Statements

    2 Statements: Statement Statements
    3           | /* empty */

    4 Statement: Label
    5          | Jump
    6          | Assignment
    7          | Print

    8 Label: 'l' 'n' ':'

    9 Jump: 'g' 'n' JumpP

   10 JumpP: 'i' Expression
   11      | /* empty */

   12 Assignment: 'm' '[' Expression ']' '=' Expression

   13 Print: 'p' Expression

   14 Expression: Product ExpressionP

   15 ExpressionP: '+' Product ExpressionP
   16            | '-' Product ExpressionP
   17            | /* empty */

   18 Product: Term ProductP

   19 ProductP: '*' Term ProductP
   20         | '/' Term ProductP
   21         | /* empty */

   22 Term: Factor TermP

   23 TermP: 'e' Factor TermP
   24      | /* empty */

   25 Factor: '(' Expression ')'
   26       | 'm' '[' Expression ']'
   27       | 'n'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 25
')' (41) 25
'*' (42) 19
'+' (43) 15
'-' (45) 16
'/' (47) 20
':' (58) 8
'=' (61) 12
'[' (91) 12 26
']' (93) 12 26
'e' (101) 23
'g' (103) 9
'i' (105) 10
'l' (108) 8
'm' (109) 12 26
'n' (110) 8 9 27
'p' (112) 13
error (256)


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
Start (21)
    on left: 1, on right: 0
Statements (22)
    on left: 2 3, on right: 1 2
Statement (23)
    on left: 4 5 6 7, on right: 2
Label (24)
    on left: 8, on right: 4
Jump (25)
    on left: 9, on right: 5
JumpP (26)
    on left: 10 11, on right: 9
Assignment (27)
    on left: 12, on right: 6
Print (28)
    on left: 13, on right: 7
Expression (29)
    on left: 14, on right: 10 12 13 25 26
ExpressionP (30)
    on left: 15 16 17, on right: 14 15 16
Product (31)
    on left: 18, on right: 14 15 16
ProductP (32)
    on left: 19 20 21, on right: 18 19 20
Term (33)
    on left: 22, on right: 18 19 20
TermP (34)
    on left: 23 24, on right: 22 23
Factor (35)
    on left: 25 26 27, on right: 22 23


State 0

    0 $accept: . Start $end

    'l'  shift, and go to state 1
    'g'  shift, and go to state 2
    'm'  shift, and go to state 3
    'p'  shift, and go to state 4

    $default  reduce using rule 3 (Statements)

    Start       go to state 5
    Statements  go to state 6
    Statement   go to state 7
    Label       go to state 8
    Jump        go to state 9
    Assignment  go to state 10
    Print       go to state 11


State 1

    8 Label: 'l' . 'n' ':'

    'n'  shift, and go to state 12


State 2

    9 Jump: 'g' . 'n' JumpP

    'n'  shift, and go to state 13


State 3

   12 Assignment: 'm' . '[' Expression ']' '=' Expression

    '['  shift, and go to state 14


State 4

   13 Print: 'p' . Expression

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Expression  go to state 18
    Product     go to state 19
    Term        go to state 20
    Factor      go to state 21


State 5

    0 $accept: Start . $end

    $end  shift, and go to state 22


State 6

    1 Start: Statements .

    $default  reduce using rule 1 (Start)


State 7

    2 Statements: Statement . Statements

    'l'  shift, and go to state 1
    'g'  shift, and go to state 2
    'm'  shift, and go to state 3
    'p'  shift, and go to state 4

    $default  reduce using rule 3 (Statements)

    Statements  go to state 23
    Statement   go to state 7
    Label       go to state 8
    Jump        go to state 9
    Assignment  go to state 10
    Print       go to state 11


State 8

    4 Statement: Label .

    $default  reduce using rule 4 (Statement)


State 9

    5 Statement: Jump .

    $default  reduce using rule 5 (Statement)


State 10

    6 Statement: Assignment .

    $default  reduce using rule 6 (Statement)


State 11

    7 Statement: Print .

    $default  reduce using rule 7 (Statement)


State 12

    8 Label: 'l' 'n' . ':'

    ':'  shift, and go to state 24


State 13

    9 Jump: 'g' 'n' . JumpP

    'i'  shift, and go to state 25

    $default  reduce using rule 11 (JumpP)

    JumpP  go to state 26


State 14

   12 Assignment: 'm' '[' . Expression ']' '=' Expression

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Expression  go to state 27
    Product     go to state 19
    Term        go to state 20
    Factor      go to state 21


State 15

   27 Factor: 'n' .

    $default  reduce using rule 27 (Factor)


State 16

   26 Factor: 'm' . '[' Expression ']'

    '['  shift, and go to state 28


State 17

   25 Factor: '(' . Expression ')'

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Expression  go to state 29
    Product     go to state 19
    Term        go to state 20
    Factor      go to state 21


State 18

   13 Print: 'p' Expression .

    $default  reduce using rule 13 (Print)


State 19

   14 Expression: Product . ExpressionP

    '+'  shift, and go to state 30
    '-'  shift, and go to state 31

    $default  reduce using rule 17 (ExpressionP)

    ExpressionP  go to state 32


State 20

   18 Product: Term . ProductP

    '*'  shift, and go to state 33
    '/'  shift, and go to state 34

    $default  reduce using rule 21 (ProductP)

    ProductP  go to state 35


State 21

   22 Term: Factor . TermP

    'e'  shift, and go to state 36

    $default  reduce using rule 24 (TermP)

    TermP  go to state 37


State 22

    0 $accept: Start $end .

    $default  accept


State 23

    2 Statements: Statement Statements .

    $default  reduce using rule 2 (Statements)


State 24

    8 Label: 'l' 'n' ':' .

    $default  reduce using rule 8 (Label)


State 25

   10 JumpP: 'i' . Expression

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Expression  go to state 38
    Product     go to state 19
    Term        go to state 20
    Factor      go to state 21


State 26

    9 Jump: 'g' 'n' JumpP .

    $default  reduce using rule 9 (Jump)


State 27

   12 Assignment: 'm' '[' Expression . ']' '=' Expression

    ']'  shift, and go to state 39


State 28

   26 Factor: 'm' '[' . Expression ']'

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Expression  go to state 40
    Product     go to state 19
    Term        go to state 20
    Factor      go to state 21


State 29

   25 Factor: '(' Expression . ')'

    ')'  shift, and go to state 41


State 30

   15 ExpressionP: '+' . Product ExpressionP

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Product  go to state 42
    Term     go to state 20
    Factor   go to state 21


State 31

   16 ExpressionP: '-' . Product ExpressionP

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Product  go to state 43
    Term     go to state 20
    Factor   go to state 21


State 32

   14 Expression: Product ExpressionP .

    $default  reduce using rule 14 (Expression)


State 33

   19 ProductP: '*' . Term ProductP

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Term    go to state 44
    Factor  go to state 21


State 34

   20 ProductP: '/' . Term ProductP

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Term    go to state 45
    Factor  go to state 21


State 35

   18 Product: Term ProductP .

    $default  reduce using rule 18 (Product)


State 36

   23 TermP: 'e' . Factor TermP

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Factor  go to state 46


State 37

   22 Term: Factor TermP .

    $default  reduce using rule 22 (Term)


State 38

   10 JumpP: 'i' Expression .

    $default  reduce using rule 10 (JumpP)


State 39

   12 Assignment: 'm' '[' Expression ']' . '=' Expression

    '='  shift, and go to state 47


State 40

   26 Factor: 'm' '[' Expression . ']'

    ']'  shift, and go to state 48


State 41

   25 Factor: '(' Expression ')' .

    $default  reduce using rule 25 (Factor)


State 42

   15 ExpressionP: '+' Product . ExpressionP

    '+'  shift, and go to state 30
    '-'  shift, and go to state 31

    $default  reduce using rule 17 (ExpressionP)

    ExpressionP  go to state 49


State 43

   16 ExpressionP: '-' Product . ExpressionP

    '+'  shift, and go to state 30
    '-'  shift, and go to state 31

    $default  reduce using rule 17 (ExpressionP)

    ExpressionP  go to state 50


State 44

   19 ProductP: '*' Term . ProductP

    '*'  shift, and go to state 33
    '/'  shift, and go to state 34

    $default  reduce using rule 21 (ProductP)

    ProductP  go to state 51


State 45

   20 ProductP: '/' Term . ProductP

    '*'  shift, and go to state 33
    '/'  shift, and go to state 34

    $default  reduce using rule 21 (ProductP)

    ProductP  go to state 52


State 46

   23 TermP: 'e' Factor . TermP

    'e'  shift, and go to state 36

    $default  reduce using rule 24 (TermP)

    TermP  go to state 53


State 47

   12 Assignment: 'm' '[' Expression ']' '=' . Expression

    'n'  shift, and go to state 15
    'm'  shift, and go to state 16
    '('  shift, and go to state 17

    Expression  go to state 54
    Product     go to state 19
    Term        go to state 20
    Factor      go to state 21


State 48

   26 Factor: 'm' '[' Expression ']' .

    $default  reduce using rule 26 (Factor)


State 49

   15 ExpressionP: '+' Product ExpressionP .

    $default  reduce using rule 15 (ExpressionP)


State 50

   16 ExpressionP: '-' Product ExpressionP .

    $default  reduce using rule 16 (ExpressionP)


State 51

   19 ProductP: '*' Term ProductP .

    $default  reduce using rule 19 (ProductP)


State 52

   20 ProductP: '/' Term ProductP .

    $default  reduce using rule 20 (ProductP)


State 53

   23 TermP: 'e' Factor TermP .

    $default  reduce using rule 23 (TermP)


State 54

   12 Assignment: 'm' '[' Expression ']' '=' Expression .

    $default  reduce using rule 12 (Assignment)
