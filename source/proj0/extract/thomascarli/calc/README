Thomas Carli 4692877
Code-Buddy Spencer Neste 4828026

	
	First I began with the scanner.  I went through all of the possible terminals I could encounter and constructed my scanner around that.  I did this process iteratively by testing the scanner on a multitude of files after every couple of terminals completed.  Once I finished the scannar and I saw that it was working properly I began working on the Parser.  The first step was to change the currently ambiguous grammar into an unambiguous grammar.  In order to do this I focused on making the grammar such that every possible parse tree derivation could only be constructed in one way which when completed also fulfilled the property that the grammar had to be LL(1).  Once I checked that the grammar was indeed unambiguous I began work on the parser.  Basically this process involved me translating the grammar I just created into c code.  Based off of the example I was able to abstract and construct a parser.  This process was also done iteratively, some of the biggest problems I faced was precedence.  Using PEMDAS (thank god I remembered high school math) I was fairly easily able to correctly structure my parser to handle even the most confusing of expressions.  I used dot along the way to check visually my parsetree.  This was helpful for debugging and checking that my parser was working correctly.  The hardest part of the project was translating the parser to c code that would then compile and run.  I got a good start by declaring all of my includes setting up my main and allocating an array to story memory.  I ran out of time trying to figure out how to correctly implement Label, Assignment, and Jump correctly.  I should have spent more time converting more of the easier code to c before tackling the bigger challenges.